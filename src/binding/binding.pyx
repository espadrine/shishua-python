import cython
from cpython.pycapsule cimport PyCapsule_New
from libc.stdint cimport uint8_t, uint32_t, uint64_t
from libc.stddef cimport size_t
from libc.string cimport memcpy
from threading import Lock
from secrets import randbits
from hashlib import sha256

__all__ = ['SHISHUA']

cdef extern from "shishua.h":
    struct prng_state:
        uint64_t state[16]
        uint64_t output[16]
        uint64_t counter[4]

cdef extern from "buffered-shishua.h":
    struct buffered_shishua_state:
        prng_state state
        uint8_t buffer[1 << 17]
        size_t buf_index

    cdef buffered_shishua_state *buffered_shishua_new(uint64_t seed[4])
    cdef void buffered_shishua_delete(buffered_shishua_state *bss)
    cdef void buffered_shishua_fill_buffer(buffered_shishua_state *bss)
    cdef void buffered_shishua_fill(buffered_shishua_state *bss, uint8_t *buf, size_t size)

    cdef uint64_t shishua_next_uint64(void *st)
    cdef uint32_t shishua_next_uint32(void *st)
    cdef double shishua_next_double(void *st)

# BitGenerator for numpy compatibility.
ctypedef struct bitgen_t:
  void *state
  uint64_t (*next_uint64)(void *st)
  uint32_t (*next_uint32)(void *st)
  double (*next_double)(void *st)
  uint64_t (*next_raw)(void *st)

DEF BUFSIZE = 1 << 17

cdef class SHISHUA:
    """
    SHISHUA(seed=None)

    SHISHUA generator

    Fast strong pseudo-random number generator.

    Parameters
    ----------
    seed : {None, int, array_like[ints], str}, optional
        A seed to initialize the PRNG. If None, then fresh,
        unpredictable entropy will be pulled from the OS.
    """
    cdef buffered_shishua_state *rng_state
    cdef bitgen_t _bitgen
    cdef readonly object lock
    cdef readonly object capsule

    def __init__(self, seed=None):
        cdef uint64_t rawseed[4]
        if seed is None:
            for i in range(4):
                rawseed[i] = randbits(64)
        elif isinstance(seed, list):
            for i in range(4):
                rawseed[i] = 0
            for i in range(len(seed)):
                rawseed[i] = abs(seed[i])
        elif isinstance(seed, str):
            sha = sha256()
            sha.update(seed.encode("utf-8"))
            h = sha.digest()
            rawseed[0] = int.from_bytes(h[ 0: 4], byteorder='little')
            rawseed[1] = int.from_bytes(h[ 4: 8], byteorder='little')
            rawseed[2] = int.from_bytes(h[ 8:12], byteorder='little')
            rawseed[3] = int.from_bytes(h[12:16], byteorder='little')
        elif isinstance(seed, int):
            rawseed[0] = abs(seed)
            rawseed[1] = rawseed[2] = rawseed[3] = 0
        else:
            raise ValueError("Invalid type for SHISHUA seed")
        self.rng_state = buffered_shishua_new(rawseed)

        # Compatibility with numpy's BitGenerator.
        self.lock = Lock()
        self._bitgen.state = <void *>self.rng_state
        self._bitgen.next_uint64 = &shishua_next_uint64
        self._bitgen.next_uint32 = &shishua_next_uint32
        self._bitgen.next_double = &shishua_next_double
        self._bitgen.next_raw = &shishua_next_uint64
        cdef const char *name = "BitGenerator"
        self.capsule = PyCapsule_New(<void *>&self._bitgen, name, NULL)

    def fill(self, buffer):
        """
        fill(self, buffer)

        Fill buffer with random bytes from the underlying BitGenerator

        Parameters
        ----------
        buffer : bytearray
            Buffer that gets fully rewritten with random bytes.
        """
        buffered_shishua_fill(self.rng_state, buffer, len(buffer))

    def random_raw(self, size=1):
        """
        random_raw(self, size=1)

        Return randoms as generated by the underlying BitGenerator

        Parameters
        ----------
        size : int
            Output buffer size, in bytes.

        Returns
        -------
        out : bytes
            Drawn samples.
        """
        buf = bytearray(size)
        self.fill(buf)
        return bytes(buf)

    def __dealloc__(self):
        buffered_shishua_delete(self.rng_state)
